name: Python CI/CD

on:
  push:
    branches: [main]
    paths:
      - ".github/workflows/basic-ci.yaml"
      - "basic-ci/**"
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  PROJECT_DIR: basic-ci

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Extract Python version from pyproject.toml
        run: |
          PYTHON_VERSION=$(grep -Po '(?<=python = ")[^"]*' ${{ env.PROJECT_DIR }}/pyproject.toml | sed 's/\^//')
          echo "Python version extracted: $PYTHON_VERSION"
          echo "PYTHON_VERSION=$PYTHON_VERSION" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.PROJECT_DIR }}/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          cd ${{ env.PROJECT_DIR }}
          poetry install --no-interaction --no-root

      - name: Run tests and collect coverage
        run: |
          cd ${{ env.PROJECT_DIR }}
          poetry run pytest --cov=./ --cov-report=xml

      # - name: Upload coverage reports to Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     files: ${{ env.PROJECT_DIR }}/coverage.xml
      #     fail_ci_if_error: true