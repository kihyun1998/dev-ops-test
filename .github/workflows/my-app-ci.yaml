name: Python CI/CD (my-app-ci)

on:
  push:
    branches: [main]
    paths:
      - ".github/workflows/my-app-ci.yaml"
      - "my-app/**"

env:
  PACKAGE: tta
  REGISTRY: ghcr.io

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      PROJECT_DIR: my-app

    steps:
      - uses: actions/checkout@v4

      - name: Extract Python version from pyproject.toml
        run: |
          PYTHON_VERSION=$(grep -Po '(?<=python = ")[^"]*' ${{ env.PROJECT_DIR }}/pyproject.toml | sed 's/\^//')
          echo "Python version extracted: $PYTHON_VERSION"
          echo "PYTHON_VERSION=$PYTHON_VERSION" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "export PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV

      - name: Install dependencies (dev)
        run: |
          cd ${{ env.PROJECT_DIR }}
          poetry install

      - name: Run tests and collect coverage
        run: |
          cd ${{ env.PROJECT_DIR }}
          poetry run pytest --cov=./ --cov-report=xml
        continue-on-error: true

  build:
    runs-on: ubuntu-latest
    needs:
      - test
    permissions:
      contents: read
      packages: write
    env:
      PROJECT_DIR: my-app

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push Docker image
        working-directory: ./${{ env.PROJECT_DIR }}
        run: |
          docker buildx build . \
            --platform linux/amd64 \
            --push \
            -t ghcr.io/${{ github.actor }}/${{ env.PACKAGE }}/${{ env.PROJECT_DIR }}:latest

  update_manifest:
    name: Update Manifets YAML for ArgoCD Sync
    runs-on: ubuntu-latest
    needs: build  # build job이 완료된 후 실행됨
    env:
      SOURCE_DIR: my-app-cd

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update timestamp and commit in manifests
        run: |
          TIMESTAMP=$(TZ=Asia/Seoul date '+%Y-%m-%d %H:%M:%S')
          COMMIT=${{ github.sha }}

          # 모든 매니페스트 파일에서 timestamp와 commit 업데이트
          for FILE in ./${{ env.SOURCE_DIR }}/*.yaml; do
            # timestamp 업데이트 또는 추가
            if grep -q "timestamp:" "$FILE"; then
              sed -i "s/timestamp: .*/timestamp: ${TIMESTAMP}/" "$FILE"
            else
              echo "  timestamp: ${TIMESTAMP}" >> "$FILE"
            fi

            # commit 업데이트 또는 추가
            if grep -q "commit:" "$FILE"; then
              sed -i "s/commit: .*/commit: ${COMMIT}/" "$FILE"
            else
              echo "  commit: ${COMMIT}" >> "$FILE"
            fi
          done

      - name: Commit changes
        run: |
          git config --global user.email "kihyun1998@naver.com"
          git config --global user.name "kihyun1998"
          git add ./${{ env.SOURCE_DIR }}/*.yaml
          git commit -m "Update timestamp and commit in manifests for ArgoCD sync"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GH_ACTION_TOKEN }}
          branch: main