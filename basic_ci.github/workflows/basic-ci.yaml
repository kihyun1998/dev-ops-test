name: Python CI/CD

on:
  push:
    branches: [main]
    paths:
      - ".github/workflows/basic-ci.yaml"
      - "basic-ci/**"
  pull_request:
    branches: [main]
    paths:
      - ".github/workflows/basic-ci.yaml"
      - "basic-ci/**"
  workflow_dispatch:
    inputs:
      environment:
        description: "Which environment to deploy to"
        required: false
        default: "dev"
      version:
        description: "Version to deploy"
        required: false
        default: "latest"

env:
  REGISTRY: ghcr.io

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      PROJECT_DIR: basic-ci

    steps:
      - uses: actions/checkout@v4  # v2에서 v4로 업데이트

      - name: Extract Python version from pyproject.toml
        run: |
          PYTHON_VERSION=$(grep -Po '(?<=python = ")[^"]*' ${{ env.PROJECT_DIR }}/pyproject.toml | sed 's/\^//')
          echo "Python version extracted: $PYTHON_VERSION"
          echo "PYTHON_VERSION=$PYTHON_VERSION" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v5  # v2에서 v5로 업데이트
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1  # poetry 설치 방식 개선
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv  # 캐시 추가
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.PROJECT_DIR }}/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          cd ${{ env.PROJECT_DIR }}
          poetry install --no-interaction --no-root

      - name: Run tests and collect coverage
        id: tests
        run: |
          cd ${{ env.PROJECT_DIR }}
          poetry run pytest --cov=./ --cov-report=xml
          echo "::set-output name=test_status::success"

      - name: Upload coverage to Codecov
        if: steps.tests.outputs.test_status == 'success'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: ${{ env.PROJECT_DIR }}
          file: ${{ env.PROJECT_DIR }}/coverage.xml
          name: ${{ env.PROJECT_DIR }}-coverage-report

      - name: Verify completion
        if: always()
        run: |
          if [ "${{ steps.tests.outputs.test_status }}" == "success" ]; then
            echo "All tests completed successfully"
            exit 0
          else
            echo "Tests failed"
            exit 1
          fi

  build:
    runs-on: ubuntu-latest
    needs:
      - test
    permissions:
      contents: read
      packages: write
    env:
      PROJECT_DIR: basic-ci

    steps:
      - uses: actions/checkout@v4  # v2에서 v4로 업데이트

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v5  # 더 나은 Docker 빌드 방식으로 변경
        with:
          context: ./${{ env.PROJECT_DIR }}
          push: true
          platforms: linux/amd64
          tags: ${{ env.REGISTRY }}/${{ github.actor }}/practice/${{ env.PROJECT_DIR }}:latest

      - name: Verify docker build
        if: always()
        run: |
          if [ "${{ steps.docker_build.outcome }}" == "success" ]; then
            echo "Docker build and push completed successfully"
            exit 0
          else
            echo "Docker build failed"
            exit 1
          fi

  deploy:
    runs-on: ubuntu-latest
    needs:
      - test
      - build
    env:
      PROJECT_DIR: basic-ci
    if: github.event_name == 'workflow_dispatch'  # workflow_dispatch 이벤트일 때만 실행

    steps:
      - uses: actions/checkout@v4  # v2에서 v4로 업데이트

      - name: Deploy application
        id: deploy
        run: |
          cd ${{ env.PROJECT_DIR }}
          echo "Deploying version ${{ github.event.inputs.version }} to ${{ github.event.inputs.environment }} environment"

      - name: Verify deployment
        if: always()
        run: |
          if [ "${{ steps.deploy.outcome }}" == "success" ]; then
            echo "Deployment completed successfully"
            exit 0
          else
            echo "Deployment failed"
            exit 1
          fi